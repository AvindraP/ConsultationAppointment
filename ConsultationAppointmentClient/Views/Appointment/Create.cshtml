@model ConsultationAppointmentClient.Models.Appointment

@{
    ViewData["Title"] = "Create";
}




<div class="card card-4 row col-md-6 offset-md-4">
    <div class="card-body">
        <h3 class="title">Create Appointment</h3>
        <hr />
        <form asp-action="Create" class="border" id="appointment-form">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @*<div class="form-group">
                <label asp-for="AppointmentId" class="control-label"></label>
                <input asp-for="AppointmentId" class="form-control" />
                <span asp-validation-for="AppointmentId" class="text-danger"></span>
            </div>*@
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Nic" class="control-label"></label>
                <input asp-for="Nic" class="form-control" />
                <span asp-validation-for="Nic" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="HomeAddress" class="control-label"></label>
                <input asp-for="HomeAddress" class="form-control" />
                <span asp-validation-for="HomeAddress" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ContactNo" class="control-label"></label>
                <input asp-for="ContactNo" class="form-control" />
                <span asp-validation-for="ContactNo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input asp-for="Date" type="date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Time" class="control-label"></label>
                <input asp-for="Time" type="time" class="form-control" />
                <span asp-validation-for="Time" class="text-danger"></span>
            </div>
            <div class="form-group p-t-15">
                <input type="submit" value="Create" class="btn btn-primary btn btn--radius-2 btn--blue" />
            </div>
        </form>
    </div>
</div>
<div id="errorMessage" style="display:block;" class="text-danger"></div>
<div>
    <a asp-action="Index" class="btn btn-primary btn btn--radius-2 btn--blue">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

@*<script>
    
    document.addEventListener("DOMContentLoaded", function () {
        var form = document.getElementById("create-form");
        var errorMessageElement = document.getElementById("error-message"); // Ensure you have this element

        if (form) {
            form.addEventListener("submit", function (event) {
                event.preventDefault();

                var formData = new FormData(this);

                fetch("/api/Appointment/Create", {
                    method: "POST",
                    body: formData
                })
                    .then(response => {
                        if (response.status === 400) {
                            return response.json().then(errorResponse => {
                                var errorMessage = errorResponse.errorMessage;
                                errorMessageElement.innerText = errorMessage;
                            }); 
                        } else if (response.ok) {
                            return response.json();
                        } else {
                            // Handle other status codes as needed
                        }
                    })
                    .then(data => {
                        if (!errorMessageElement.innerText) {
                            // No error, perform the redirect here
                            window.location.href = "/index"; // Adjust the URL as needed
                            console.log("no error test:", errorMessageElement);
                            console.log("no errr", errorMessage);
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        console.log("Error message element:", errorMessageElement);
                        console.log("Error message:", errorMessage);
                    });
            });
        }
    });

        //document.getElementById("Date").addEventListener("change", function() {
        //    // Get the selected date
        //    var selectedDate = this.value;

        //    // Convert the date to the ISO format (yyyy-mm-dd) expected by the server
        //    var isoDate = new Date(selectedDate).toISOString().split('T')[0];

        //    // Update the input value with the ISO-formatted date
        //    this.value = isoDate;
        //});
</script>*@